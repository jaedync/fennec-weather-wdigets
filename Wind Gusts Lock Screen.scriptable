{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "teal",
    "glyph" : "magic"
  },
  "name" : "Wind Gusts Lock Screen",
  "script" : "\/*\nLock screen widget. Shows wind gusts as a progress circle.\nThis script is meant to be used with Scriptable. You can download Scriptable on the App Store: https:\/\/apps.apple.com\/us\/app\/scriptable\/id1405459188\nCode borrowed in large part from https:\/\/github.com\/Sillium\/telekom-lock-screen-widget <3\n\nAdapted (sloppily) to connect with LETU Weather API by Jaedyn Chilton\n\nTo use this widget, you need to create a new Scriptable script on your iOS device and paste the code into the script. \nThen you can add a new Scriptable widget to your lock screen and select this script.\n\n*\/\n\n\nconst DEBUG = false;\nconst log = DEBUG ? console.log.bind(console) : function () { };\n\n\/\/ Function to fetch wind speed data\nasync function fetchWindSpeed() {\n  const url = \"https:\/\/weather.jaedynchilton.com\/current\";\n  const request = new Request(url);\n  const response = await request.loadJSON();\n  const windSpeed = response.data[0].wind_speed_hi_last_10_min; \/\/ Adjust to any other value from the API desired\n  return windSpeed;\n}\n\n\/\/ Initialize the widget\nconst widget = new ListWidget();\n\n\/\/ Get Progress Circle service\nlet ProgressCircleService = await getService(\n    \"ProgressCircle\",\n    \"https:\/\/gist.githubusercontent.com\/Sillium\/4210779bc2d759b494fa60ba4f464bd8\/raw\/9e172bac0513cc3cf0e70f3399e49d10f5d0589c\/ProgressCircleService.js\",\n    DEBUG\n);\n\n\/\/ Fetch wind speed and calculate progress\nconst windSpeed = await fetchWindSpeed();\nconst maxWindSpeed = 10; \/\/ Maximum wind speed for the scale\nlet percent = (windSpeed \/ maxWindSpeed) * 100;\nlog(\"Wind Speed Percent: \" + percent);\n\nlet progressStack = await ProgressCircleService.drawArc(widget, percent);\n\n\/\/ Display the wind speed number in the middle of the progress circle\nlet windSpeedText = progressStack.addText(`${windSpeed.toFixed(0)}`);\nwindSpeedText.centerAlignText();\nwindSpeedText.font = new Font(\"Verdana\", 24);\nwidget.presentAccessoryCircular(); \/\/ Does not present correctly\nScript.setWidget(widget);\nScript.complete();\n\n\/\/ get library from local filestore or download it once\nasync function getService(name, url, forceDownload) {\n    const fm = FileManager.local();\n    const scriptDir = module.filename.replace(fm.fileName(module.filename, true), '');\n    let serviceDir = fm.joinPath(scriptDir, \"lib\/service\/\" + name);\n\n    if (!fm.fileExists(serviceDir)) {\n        fm.createDirectory(serviceDir, true);\n    }\n\n    let libFile = fm.joinPath(serviceDir, \"index.js\");\n    \n    if (fm.fileExists(libFile) && !forceDownload) {\n        fm.downloadFileFromiCloud(libFile);\n    } else {\n        \/\/ download once\n        let indexjs = await loadText(url);\n        fm.write(libFile, indexjs);\n    }\n\n    let service = importModule(\"lib\/service\/\" + name);\n    return service;\n}\n\n\/\/ helper function to download a text file from a given url\nasync function loadText(textUrl) {\n    const req = new Request(textUrl);\n    return await req.load();\n}",
  "share_sheet_inputs" : [

  ]
}