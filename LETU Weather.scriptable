{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "cloud"
  },
  "name" : "LETU-Weather",
  "script" : "\/*\n\nThis script creates a widget for the iOS home screen that displays the current weather data from the LETU Weather Station. \nThe widget shows the temperature, dew point, average wind speed, and timestamp of the data. \nThe data is fetched from the LETU Weather Station API, created by Jaedyn Chilton.\n\nThis script is meant to be used with Scriptable. You can download Scriptable on the App Store: https:\/\/apps.apple.com\/us\/app\/scriptable\/id1405459188\n\nTo use this widget, you need to create a new Scriptable script on your iOS device and paste the code into the script. \nThen you can add a new Scriptable widget to your lock screen and select this script.\n\n*\/\n\n\n\nasync function fetchWeatherData() {\n    \/\/ Define the URL of the API endpoint\n    const url = \"https:\/\/weather.jaedynchilton.com\/current\";\n    \n    \/\/ Fetch the data from the API\n    const request = new Request(url);\n    const response = await request.loadJSON();\n    \n    \/\/ Extract the temperature, dew point, average wind speed, and timestamp from the response\n    const temperature = response.data[0].temp;\n    const dewPoint = response.data[0].dew_point;\n    const windSpeedAvgLast10Min = response.data[0].wind_speed_avg_last_10_min;\n    const uvIndex = response.data[0].uv_index;\n    const ts = response.data[0].ts;    \n    const percentHumidity = response.data[0].hum;    \n    \n    \/\/ Return the values\n    return { temperature, dewPoint, windSpeedAvgLast10Min, uvIndex, ts, percentHumidity };\n  }\n  \n  \/\/ Function to create the widget\n  async function createWidget() {\n    \/\/ Fetch the weather data\n    const weatherData = await fetchWeatherData();\n    \n    \/\/ Create a new list widget\n    const widget = new ListWidget();\n    \n    \/\/ Set the widget's background gradient to a dark theme\n    const startColor = new Color(\"#2c3e50\");\n    const endColor = new Color(\"#34495e\");\n    const gradient = new LinearGradient();\n    gradient.colors = [startColor, endColor];\n    gradient.locations = [0.0, 1.0];\n    widget.backgroundGradient = gradient;\n    \n    \/\/ Set the padding for the widget\n    widget.setPadding(0, 6, 6, 6);\n    \n    \/\/ Create a vertical stack to hold the temperature and horizontal stack\n    const vStack = widget.addStack();\n    vStack.layoutVertically();\n    vStack.centerAlignContent();\n    \n    \/\/ Add the title to the vertical stack\n      const titleText = vStack.addText(\" LETU Weather Station\");\n    titleText.textColor = new Color(\"#ffffff\", 0.7); \/\/ White color with 70% opacity    \n      titleText.font = Font.boldSystemFont(10); \/\/ You can adjust the font size\n    \n    \/\/ Add the temperature to the vertical stack\n    const tempText = vStack.addText(`${weatherData.temperature}°F`);\n    tempText.textColor = Color.white();\n    tempText.font = Font.boldSystemFont(36);  \/\/ Increased font size\n    \n    \/\/ Add spacing between temperature and horizontal stack\n    vStack.addSpacer(2);  \/\/ Adjust the spacing as needed\n    \n    \/\/ Create a horizontal stack for Dew Point and Wind Speed\n    const hStack = vStack.addStack();\n    hStack.layoutHorizontally();\n    hStack.spacing = 10;\n    \n    \/\/ Add the dew point to the horizontal stack\n    const labelText = hStack.addText(`Humid:\\nDew: \\nWind:`);\n    labelText.textColor = new Color(\"#ecf0f1\");  \/\/ Slightly different color for variation\n    labelText.font = Font.systemFont(14);\n    \n    \/\/ Add a vertical divider (using a text element with a vertical line character)\n    const divider = hStack.addText(\"|\\n|\\n|\");\n    divider.textColor = new Color(\"#ecf0f1\", 0.5);  \/\/ 50% opacity\n    divider.font = Font.systemFont(14);\n    \n    \/\/ Add the average wind speed to the horizontal stack\n    const valuesText = hStack.addText(`${weatherData.percentHumidity}%\\n${weatherData.dewPoint}°F\\n${weatherData.windSpeedAvgLast10Min}mi`);\n    valuesText.textColor = new Color(\"#ecf0f1\");  \/\/ Slightly different color for variation\n    valuesText.font = Font.systemFont(14);\n    \n    \/\/ Convert Unix timestamp to DateTime in local timezone\n    const localTime = new Date(weatherData.ts * 1000).toLocaleString();\n    \n    \/\/ Add the DateTime to the vertical stack\n    vStack.addSpacer(5);  \/\/ Adjust the spacing as needed\n    const dateTimeText = vStack.addText(`${localTime}`);\n    dateTimeText.textColor = Color.gray();\n    dateTimeText.font = Font.systemFont(10); \/\/ Smaller font size for DateTime\n    \n    \/\/ Return the widget\n    return widget;\n  }\n  \n  \/\/ Create and display the widget\n  const widget = await createWidget();\n  if (config.runsInWidget) {\n    \/\/ Runs inside a widget so add it to the homescreen\n    Script.setWidget(widget);\n  } else {\n    \/\/ Runs inside the app, so show a preview\n    widget.presentSmall();\n  }\n  \n  Script.complete();",
  "share_sheet_inputs" : [

  ]
}